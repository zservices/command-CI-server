#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Copyright (c) YEAR USER_NAME

# An example of type-agnostic script/function, i.e.: the file can be run as a +x
# script or as an autoload function.

# Bootstrap complete exec environment…
0=${${0:#$ZSH_ARGZERO}:-${(%):-%N}}
0=${${(M)0##/*}:-$PWD/${0#./}}
# … by loading common.snip.zsh.
source $0:h/lib/common.snip.zsh cmd-server $0:h

# Tilde expand for all directories.
CMD_COMMAND_PATH=${CMD_COMMAND_PATH//(#b)((#s)|:)\~([A-Za-z0-9_]#)/\
$( eval q="~$match[1]"; print -rn -- $q)}

# Load configuration file if properly given.
[[ -f $1 ]] && source $1 || \
    { [[ -n $1 ]] && msg {208}Error:{41} config $1 not found, ignoring…;}

#
# Pre-process the repositories filtering out incorrect ones.
#

# -T ties a comma separated scalar with an array.
local -TUx CMD_COMMAND_PATH in_src_dirs
local -TUx FILT_COMMAND_PATH src_dirs
local prj tpe prev_tpe outfile cmd cmd_name
integer i count lockfd exit_code
local -a tmp
local -A INI

csrv-filter-dirs $in_src_dirs || exit 1
src_dirs=( $reply )

# Save the processed value and other Plugins hash fields.
Plugins[CMD_COMMAND_PATH]=$FILT_COMMAND_PATH
Plugins[CMD_CONF_INTERVAL]=${CMD_CONF_INTERVAL:=5}

#
# Establish command binary to use.
#

#
# Main loop
#

while ((1)); do
    sleep $Plugins[CMD_CONF_INTERVAL]
    i=0

    #
    # Compile each of the projects and test their result,
    # setting their private state files.
    #
    for prj in $src_dirs; do
        i+=1

        for cmd in $prj/*.(ini|cmd)(N); do
            $Plugins[CMD_LIBEXEC_DIR]/cmd-run $cmd
            exit_code=$?
            msg {208}COMMAND-SERVER:%f Command $cmd of {39}$prj:%f \
                run with exit code $exit_code.
        done
    done
done

# vim:ft=zsh:tw=80:sw=4:sts=4:et:foldmarker=[[[,]]]
