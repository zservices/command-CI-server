#!/usr/bin/env zsh
# Obtains the command to run and full path to log
# in its directory and outputs to it plus two other
# locations (/tmp and ~/.config/csrv)
csrv-run-command()
{
    local -A Cfg
    # In case running bare script, without plugin manager
    local CACHE var_name=$1 cmd_name=$2 data_file=$3
    local -a args
    shift 3

    Cfg=( "${(@PAkv)var_name}" )
    CACHE=${ZSRV_THIS_CACHE:-${ZSH_CACHE_DIR:-${XDG_CACHE_HOME:-$HOME/.cache}}}
    CACHE+=/commandsrv

    # Create cacbe dir.
    command mkdir -p $CACHE

    # Get the run entity.
    local cmd=${Cfg[main__runnable]}
    # Get the arguments.
    csrv-get-args $var_name
    args=( "$reply[@]" )

    local stdin=${Cfg[io__in]:-stdin} stdout=${Cfg[io__out]:-stdout} \
            stderr=${Cfg[io__err]:-stderr}
    print →→ $stdout / $stderr
    local text="$cmd \"\${args[@]}\" &>>!\"\$CACHE/$cmd_name.out\" &>>!\"\$data_file\""
    csrv-extend-iocmd-text $text 0 $stdin
    csrv-extend-iocmd-text $REPLY 1 $stdout
    csrv-extend-iocmd-text $REPLY 2 $stderr

    text=$REPLY

    # Run via eval to allow e.g.: cmd="env PATH=… command"
    # or cmd="command -C …"
    builtin eval $text
    # Save the PID of the background command
    REPLY=$!
    print running $text…
    Plugins[CMD_${(U)cmd}_PID]=$REPLY
}

# vim:ft=zsh:sw=4:sts=4:ts=8:et
