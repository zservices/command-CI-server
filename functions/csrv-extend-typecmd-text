#!/usr/bin/env zsh
csrv-extend-typecmd-text() {
    local var_name=$1 cmd=$2 tpe env sh pth
    shift 2

    local -a args=( "$@" )
    local -A Config
    Config=( "${(@PAkv)var_name}" )

    reply=()
    tpe=$Config[main__type]
    env=$Config[main__env]
    sh=$Config[main__shell]
    pth=$Config[x_ini_path]:r.env

    [[ -z $env && -f $pth ]]&&env=$pth
    if [[ $tpe == source ]]; then 
        if [[ $sh != (none|) ]]; then
            # The arguments fall from positional params set for zsh -c
            # to the source command, which automatically inherits them.
            reply=( $sh -c "${env:+source\ $env;} source \"\$@\"" "${(q)cmd}" csrv-source )
        else
            # The positional parameters are automatically appended by
            # source builtin by the wrapping eval.
            reply=( "${env:+source $env;}source ${(q)cmd}" )
        fi
    elif [[ $tpe == binary ]]; then
        if [[ $sh != (none|) ]]; then
            reply=( $sh -c "'${env:+source $env;} $cmd \"\$@\"'" csrv-bin )
        else
            reply=( "${env:+source $env;} $cmd \"\$@\"" )
        fi
    elif [[ $tpe == autoload ]]; then
        if [[ $sh != (none|) ]]; then
            reply=( $sh -c "\"${env:+source $env;} autoload $cmd; $cmd \\\"\\\$@\\\"\"" csrv-autoload )
        else
            autoload $cmd
            reply=( ${=env:+source $env;} $cmd )
        fi
    elif [[ $tpe == eval ]]; then
        if [[ $sh != (none|) ]]; then
            reply=( $sh -c '"'"${=env:+source $env;}""eval $cmd"' \"\$@\""' csrv-eval )
        else
            reply=( eval ${=env:+source $env ;} $cmd )
        fi
    fi
    reply+=( "$args[@]" )
}

# vim:ft=zsh:sw=4:sts=4:ts=8:et
