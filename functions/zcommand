#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Copyright (c) 2022 Sebastian Gniazdowski

# A function or a script from $PATH.

# Set the base and typically useful options.
emulate -LR zsh
setopt extendedglob warncreateglobal typesetsilent noshortloops \
        rcquotes noautopushd multios nomonitor

# Run as script? ZSH_SCRIPT is a Zsh 5.3 addition
if [[ $0 != zmake || -n $ZSH_SCRIPT ]]; then
    0=${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}
    0=${${(M)0##/*}:-$PWD/$0}

    # Such global variable is expected to be typeset'd -g in the plugin.zsh
    # file. Here it's restored in case of the function being run as a script.
    typeset -gA Plugins
    Plugins[MSERV_DIR]=${0:h}
fi

{ zmodload zsh/system && zsystem supports flock
  Plugins+=( MSERV_FLOCK_AVAIL $((!$?)) ); } &>/dev/null

Plugins[MSERV_LOCK_FILE]=.mksrv-upmost

# Allow accessing other functions as scripts.
local -aU path=( $path ); local -xU PATH=$PATH
path+=( $Plugins[MSERV_DIR]/functions )

# Wait for finished state in order to close `tail`.
wait_for_tail() {
    local state
    integer cnt
    while ((1)); do
        LANG=C command sleep 0.3
        state=( $(<$1/.mksrv-state) )
        if [[ $state[1] == finished || $cnt -gt 400 ]]; then
            kill -INT $Plugins[MSERV_TAIL_PID]
            return
        fi
        cnt+=1
    done
}

# A message on the type of run and its time.
info() {
    local tpe=$1 rtpe=$1 prj=$2 minutes
    local -a mtime 
    local -A map=( err errors warn warnings \
                 clean "no notices" null "no compilation" )
    tpe=$map[$tpe]
    builtin zstat +mtime -A mtime $prj/.mksrv-last-$rtpe
    minutes=$(((EPOCHSECONDS-mtime)/60))

    msg %B{39}MAKE{70} finished with result: {183}${(U)tpe}\
        {39}$minutes minutes ago{70}.
}

parse_opts() {
    builtin zparseopts -D -E -err=opt_err e=opt_err \
                -warn=opt_warn w=opt_warn \
                -clean=opt_clean c=opt_clean \
                -null=opt_null n=opt_null \
                -info=opt_info i=opt_info \
                -forward=opt_forw f=opt_forw \
                -help=opt_help h=opt_help
    reply=("$@")
}

help() {
    msg %B{140}Usage: {39}zmake {70}-h{140}/{70}--help \
        -c{140}/{70}--clean \
        -e{140}/{70}--err \
        -w{140}/{70}--warn \
        -n{140}/{70}--null
    msg  '\n {70}-h{140}/{70}--help%f       This message\n' \
        '{70}-c{140}/{70}--clean%f      Last clean build (no errors but with compile actions)\n' \
        '{70}-e{140}/{70}--err%f        Last build with errors\n' \
        '{70}-w{140}/{70}--warn%f       Last build with warnings\n' \
        '{70}-n{140}/{70}--null%f       Last no-actions make output'
    msg '%B\n{39}zmake%f%b without arguments will either:\n' \
        '{70}-%f show most recent build\n' \
        '{70}-%f tail on currently ongoing build'
}

# Print last run of given type.
past() {
    local repo=$1 kind=$2 prefix=$1/.mksrv-last suffix file minutes
    local -a mtime
    local -A map=( 1 errors 2 warnings 4 "no notices" 8 "no actions" )
    local -A file_suffix=( errors err warnings warn 
                         "no notices" clean "no actions" null )

    kind=$map[$kind]
    suffix=$file_suffix[$kind]
    file=$prefix-$suffix

    if [[ -f $file ]]; then
        msg %B{70}Last {39}$kind{70} make run:
        builtin zstat +mtime -A mtime $file
        builtin strftime -s mtime "%Y-%msg-%d %H:%M:%S" $mtime
        cat $file
        info $suffix $repo
        msg %B{33}Printed past make run from: {170}$mtime
    else
        msg %B{70}No make run that finished with {140}${kind}{70} observed yet.
    fi
}

find_repo() {
    # Default empty return.
    REPLY=
    # Find the main git dir uptree.
    local -a repos=( (../)#$1(DN.) )
    (($#repos)) || return 1
    # Select the shortest match.
    REPLY=${${${(On)repos}[1]}:h}
    # Remove any ../ from it.
    REPLY=$REPLY:a

}

local -a reply opt_err opt_warn opt_clean opt_null opt_info opt_forw opt_help
local tmp repo rmake=0

parse_opts "$@"
set -- "$reply[@]"

if (( $#opt_help )); then
    help
    return 01
fi

# Any additional argument means normal `make` run.
opt_forw+=( $@ )

find_repo .mksrv-state

if [[ -z $REPLY ]] || (($#opt_forw)); then
    find_repo Makefile
    repo=$REPLY
    if [[ -z $repo ]]; then
        msg {208}%BError:%f%b no {140}make-server%f managed directory nor regular {39}Makefile%f project found in PWD and uptree, exiting…
    else
        command rm -f $repo/.mksrv-sleep
        if (( !$#opt_forw )); then
            msg {208}%BWarning:%f%b the project {140}$repo:t%f isn\'t managed \
            by {220}make-server%f, running {39}make %fdirectly…
            sleep 1
        fi
        while ((1)); do
            { local state=${${$(<$repo/.mksrv-state)[1]}:-finished} } &>/dev/null
            if (( Plugins[MSERV_FLOCK_AVAIL] )) || [[ $state == finished ]]; then
                (
                    # Try to gain lock if flock is available.
                    if ! zsystem flock -t 0 $repo/$Plugins[MSERV_LOCK_FILE] &>/dev/null
                    then
                        if (( $? != 2 )) && [[ $state == finished ]]; then
                            :
                        else
                            msg {208}Warning:%fWaiting for background {70}make%f to finish…
                            sleep 1
                            continue
                        fi
                    fi
                    # Regular sentinels in case of lack of flock.
                    command touch $repo/.mksrv-lock
                    command make -C $repo $@
                    command rm -f $repo/.mksrv-lock
                    return 1
                ) || break
            fi
        done
        if (( !$#opt_forw )); then
            msg {208}%BWarning:%f%b the project {140}$repo:t%f isn\'t managed \
                by {220}make-server%f, was running {39}make %fdirectly…
        fi
    fi
    return
fi

repo=$REPLY
command rm -f $repo/.mksrv-sleep

# Parse the --warn/-w --err/-e --clean/-c --info/-i options.

# Examine state.
{ local -a state=( $(<$repo/.mksrv-state) ) upmost=( $(<$repo/.mksrv-upmost) ) } 2>/dev/null
if [[ -z $state ]]; then
    msg {174}%BNo make-server running for {70}$repo{174}… Exiting…
    return
fi

#upmost[1]=${${upmost[1]:#no-compilation}:-null}
if (( $#opt_err|$#opt_warn|$#opt_clean|$#opt_null )); then
    past $repo $(( ${#opt_err[1][1]} + ${#opt_warn[1][1]}*2 + \
                ${#opt_clean[1][1]}*4 + ${#opt_null[1][1]}*8))
    return 0
fi

# Is the compilation currently running?
if [[ $state[1] == ongoing ]]; then
    msg %B{70}Make is currently still running under pid «{140}$state[3]{70}»…
    tail -n 10000 -f $state[2] &
    tmp=$!
    # Cannot assign directly
    Plugins[MSERV_TAIL_PID]=$tmp
    wait_for_tail $repo
    LANG=C command sleep 0.5
    upmost=( $(<$repo/.mksrv-upmost) )
    info $upmost[1] $repo
# No – then get last make run output.
else
    info $upmost[1] $repo
    cat $repo/$upmost[3]
    info $upmost[1] $repo
fi

# vim:ft=zsh:tw=80:sw=4:sts=4:et:foldmarker=[[[,]]]
